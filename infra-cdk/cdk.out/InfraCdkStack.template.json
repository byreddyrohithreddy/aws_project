{
 "Resources": {
  "AdminUserE644DE64": {
   "Type": "AWS::IAM::User",
   "Properties": {
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AdministratorAccess"
       ]
      ]
     }
    ],
    "UserName": "admin"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/AdminUser/Resource"
   }
  },
  "AdminUserAccessKeycdkNamesuniqueId": {
   "Type": "AWS::IAM::AccessKey",
   "Properties": {
    "UserName": {
     "Ref": "AdminUserE644DE64"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/AdminUserAccessKey-${cdk.Names.uniqueId()}"
   }
  },
  "MyEc2RoleAA933E0F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonDynamoDBFullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonS3FullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonEC2FullAccess"
       ]
      ]
     }
    ],
    "RoleName": "MyEc2Role"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyEc2Role/Resource"
   }
  },
  "MyInstanceProfile": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "MyEc2RoleAA933E0F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyInstanceProfile"
   }
  },
  "projects3bucketF7E4AFB6": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "PUT",
        "DELETE",
        "POST"
       ],
       "AllowedOrigins": [
        "*"
       ]
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:cr-owned:04eea79f",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/project_s3_bucket/Resource"
   }
  },
  "DeployFileAwsCliLayer3A72CE55": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/DeployFile/AwsCliLayer/Resource",
    "aws:asset:path": "asset.3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "DeployFileCustomResource1E1AD25E": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     }
    ],
    "SourceObjectKeys": [
     "4386df1857059409e31dcb66080526052b9fe656111e93ab71b123c951a03144.zip"
    ],
    "DestinationBucketName": {
     "Ref": "projects3bucketF7E4AFB6"
    },
    "Prune": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/DeployFile/CustomResource/Default"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           },
           "/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::",
           {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
           }
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "projects3bucketF7E4AFB6",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "projects3bucketF7E4AFB6",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "DeployFileAwsCliLayer3A72CE55"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
    "aws:asset:path": "asset.2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "dynamodbtable2CA3F889": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    },
    "StreamSpecification": {
     "StreamViewType": "NEW_IMAGE"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/dynamodb_table/Resource"
   }
  },
  "insertdbfunctionServiceRoleFDF49BEE": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/insertdbfunction/ServiceRole/Resource"
   }
  },
  "insertdbfunctionServiceRoleDefaultPolicy1064A114": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "dynamodbtable2CA3F889",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "projects3bucketF7E4AFB6",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "projects3bucketF7E4AFB6",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "insertdbfunctionServiceRoleDefaultPolicy1064A114",
    "Roles": [
     {
      "Ref": "insertdbfunctionServiceRoleFDF49BEE"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/insertdbfunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "insertdbfunction83C6763B": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "133c6e961bc1457c00b772b3df33906ee76b2217bf18fffe6bf4be786b9173e7.zip"
    },
    "Environment": {
     "Variables": {
      "TABLE_NAME": {
       "Ref": "dynamodbtable2CA3F889"
      },
      "REGION_NAME": {
       "Ref": "AWS::Region"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "insertdbfunctionServiceRoleFDF49BEE",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x"
   },
   "DependsOn": [
    "insertdbfunctionServiceRoleDefaultPolicy1064A114",
    "insertdbfunctionServiceRoleFDF49BEE"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/insertdbfunction/Resource",
    "aws:asset:path": "asset.133c6e961bc1457c00b772b3df33906ee76b2217bf18fffe6bf4be786b9173e7",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "ApiGatewayRoleD2518903": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": "MyApiGatewayRole"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/ApiGatewayRole/Resource"
   }
  },
  "ApiGatewayRoleDefaultPolicyC1776BBE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "insertdbfunction83C6763B",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ApiGatewayRoleDefaultPolicyC1776BBE",
    "Roles": [
     {
      "Ref": "ApiGatewayRoleD2518903"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/ApiGatewayRole/DefaultPolicy/Resource"
   }
  },
  "MyApi49610EDF": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "MyApi"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyApi/Resource"
   }
  },
  "MyApiDeploymentECB0D05E4e953e39219cf884c0777d4da3c0128a": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "MyApi49610EDF"
    }
   },
   "DependsOn": [
    "MyApiOPTIONSDA752FC6",
    "MyApiPOSTE61A1FD3"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyApi/Deployment/Resource"
   }
  },
  "MyApiDeploymentStageprodE1054AF0": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "MyApiDeploymentECB0D05E4e953e39219cf884c0777d4da3c0128a"
    },
    "RestApiId": {
     "Ref": "MyApi49610EDF"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyApi/DeploymentStage.prod/Resource"
   }
  },
  "MyApiOPTIONSDA752FC6": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "MyApi49610EDF",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "MyApi49610EDF"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyApi/Default/OPTIONS/Resource"
   }
  },
  "MyApiPOSTApiPermissionInfraCdkStackMyApi339CF261POST9A6931DD": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "insertdbfunction83C6763B",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "MyApi49610EDF"
       },
       "/",
       {
        "Ref": "MyApiDeploymentStageprodE1054AF0"
       },
       "/POST/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyApi/Default/POST/ApiPermission.InfraCdkStackMyApi339CF261.POST.."
   }
  },
  "MyApiPOSTApiPermissionTestInfraCdkStackMyApi339CF261POST6015EF70": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "insertdbfunction83C6763B",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "MyApi49610EDF"
       },
       "/test-invoke-stage/POST/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyApi/Default/POST/ApiPermission.Test.InfraCdkStackMyApi339CF261.POST.."
   }
  },
  "MyApiPOSTE61A1FD3": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "insertdbfunction83C6763B",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "MyApi49610EDF",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "MyApi49610EDF"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyApi/Default/POST/Resource"
   }
  },
  "MyKeyPair659209CA": {
   "Type": "AWS::EC2::KeyPair",
   "Properties": {
    "KeyFormat": "pem",
    "KeyName": "my-data-key",
    "KeyType": "rsa"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyKeyPair/Resource"
   }
  },
  "MyVpcF9F0CA6F": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/Resource"
   }
  },
  "MyVpcPublicSubnet1SubnetF6608456": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet1/Subnet"
   }
  },
  "MyVpcPublicSubnet1RouteTableC46AB2F4": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet1/RouteTable"
   }
  },
  "MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "MyVpcPublicSubnet1RouteTableC46AB2F4"
    },
    "SubnetId": {
     "Ref": "MyVpcPublicSubnet1SubnetF6608456"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet1/RouteTableAssociation"
   }
  },
  "MyVpcPublicSubnet1DefaultRoute95FDF9EB": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "MyVpcIGW5C4A4F63"
    },
    "RouteTableId": {
     "Ref": "MyVpcPublicSubnet1RouteTableC46AB2F4"
    }
   },
   "DependsOn": [
    "MyVpcVPCGW488ACE0D"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet1/DefaultRoute"
   }
  },
  "MyVpcPublicSubnet1EIP096967CB": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet1/EIP"
   }
  },
  "MyVpcPublicSubnet1NATGatewayAD3400C1": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "MyVpcPublicSubnet1EIP096967CB",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "MyVpcPublicSubnet1SubnetF6608456"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "MyVpcPublicSubnet1DefaultRoute95FDF9EB",
    "MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet1/NATGateway"
   }
  },
  "MyVpcPublicSubnet2Subnet492B6BFB": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet2/Subnet"
   }
  },
  "MyVpcPublicSubnet2RouteTable1DF17386": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet2/RouteTable"
   }
  },
  "MyVpcPublicSubnet2RouteTableAssociation227DE78D": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "MyVpcPublicSubnet2RouteTable1DF17386"
    },
    "SubnetId": {
     "Ref": "MyVpcPublicSubnet2Subnet492B6BFB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet2/RouteTableAssociation"
   }
  },
  "MyVpcPublicSubnet2DefaultRoute052936F6": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "MyVpcIGW5C4A4F63"
    },
    "RouteTableId": {
     "Ref": "MyVpcPublicSubnet2RouteTable1DF17386"
    }
   },
   "DependsOn": [
    "MyVpcVPCGW488ACE0D"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet2/DefaultRoute"
   }
  },
  "MyVpcPublicSubnet2EIP8CCBA239": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet2/EIP"
   }
  },
  "MyVpcPublicSubnet2NATGateway91BFBEC9": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "MyVpcPublicSubnet2EIP8CCBA239",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "MyVpcPublicSubnet2Subnet492B6BFB"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "MyVpcPublicSubnet2DefaultRoute052936F6",
    "MyVpcPublicSubnet2RouteTableAssociation227DE78D"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PublicSubnet2/NATGateway"
   }
  },
  "MyVpcPrivateSubnet1Subnet5057CF7E": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet1/Subnet"
   }
  },
  "MyVpcPrivateSubnet1RouteTable8819E6E2": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet1/RouteTable"
   }
  },
  "MyVpcPrivateSubnet1RouteTableAssociation56D38C7E": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "MyVpcPrivateSubnet1RouteTable8819E6E2"
    },
    "SubnetId": {
     "Ref": "MyVpcPrivateSubnet1Subnet5057CF7E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet1/RouteTableAssociation"
   }
  },
  "MyVpcPrivateSubnet1DefaultRouteA8CDE2FA": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "MyVpcPublicSubnet1NATGatewayAD3400C1"
    },
    "RouteTableId": {
     "Ref": "MyVpcPrivateSubnet1RouteTable8819E6E2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet1/DefaultRoute"
   }
  },
  "MyVpcPrivateSubnet2Subnet0040C983": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet2/Subnet"
   }
  },
  "MyVpcPrivateSubnet2RouteTableCEDCEECE": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet2/RouteTable"
   }
  },
  "MyVpcPrivateSubnet2RouteTableAssociation86A610DA": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "MyVpcPrivateSubnet2RouteTableCEDCEECE"
    },
    "SubnetId": {
     "Ref": "MyVpcPrivateSubnet2Subnet0040C983"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet2/RouteTableAssociation"
   }
  },
  "MyVpcPrivateSubnet2DefaultRoute9CE96294": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "MyVpcPublicSubnet2NATGateway91BFBEC9"
    },
    "RouteTableId": {
     "Ref": "MyVpcPrivateSubnet2RouteTableCEDCEECE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/PrivateSubnet2/DefaultRoute"
   }
  },
  "MyVpcIGW5C4A4F63": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "InfraCdkStack/MyVpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/IGW"
   }
  },
  "MyVpcVPCGW488ACE0D": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "MyVpcIGW5C4A4F63"
    },
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/VPCGW"
   }
  },
  "MyVpcRestrictDefaultSecurityGroupCustomResourceA4FCCD62": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "MyVpcF9F0CA6F",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MyVpc/RestrictDefaultSecurityGroupCustomResource/Default"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "MyVpcF9F0CA6F",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler",
    "aws:asset:path": "asset.ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a",
    "aws:asset:property": "Code"
   }
  },
  "MySecurityGroupAC8D442C": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "InfraCdkStack/MySecurityGroup",
    "GroupName": "MySecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow SSH from anywhere",
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     }
    ],
    "VpcId": {
     "Ref": "MyVpcF9F0CA6F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/MySecurityGroup/Resource"
   }
  },
  "LambdaRole3A44B857": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonDynamoDBFullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonEC2FullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/IAMFullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/LambdaRole/Resource"
   }
  },
  "LambdaRoleDefaultPolicy75625A82": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "iam:PassRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MyEc2RoleAA933E0F",
         "Arn"
        ]
       }
      },
      {
       "Action": "dynamodb:ListStreams",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "dynamodbtable2CA3F889",
         "StreamArn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaRoleDefaultPolicy75625A82",
    "Roles": [
     {
      "Ref": "LambdaRole3A44B857"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/LambdaRole/DefaultPolicy/Resource"
   }
  },
  "triggerfunction8C71FD1D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "9521e49a25d8446728bbe8c5ee6057c343c3e7ca1a0e5b1a0c662f826a3b7c93.zip"
    },
    "Environment": {
     "Variables": {
      "TABLE_NAME": {
       "Ref": "dynamodbtable2CA3F889"
      },
      "securityGroupId": {
       "Fn::GetAtt": [
        "MySecurityGroupAC8D442C",
        "GroupId"
       ]
      },
      "keyPair": {
       "Ref": "MyKeyPair659209CA"
      },
      "BUCKET_NAME": {
       "Ref": "projects3bucketF7E4AFB6"
      },
      "ARN": {
       "Fn::GetAtt": [
        "MyInstanceProfile",
        "Arn"
       ]
      },
      "REGION_NAME": {
       "Ref": "AWS::Region"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaRole3A44B857",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x"
   },
   "DependsOn": [
    "LambdaRoleDefaultPolicy75625A82",
    "LambdaRole3A44B857"
   ],
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/triggerfunction/Resource",
    "aws:asset:path": "asset.9521e49a25d8446728bbe8c5ee6057c343c3e7ca1a0e5b1a0c662f826a3b7c93",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "triggerfunctionDynamoDBEventSourceInfraCdkStackdynamodbtable229F239F47AE2315": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 100,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "dynamodbtable2CA3F889",
      "StreamArn"
     ]
    },
    "FunctionName": {
     "Ref": "triggerfunction8C71FD1D"
    },
    "StartingPosition": "LATEST"
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/triggerfunction/DynamoDBEventSource:InfraCdkStackdynamodbtable229F239F/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VS0W7bMAz8lr4rWpoCe3e9rQi6bkay5TWgZTpVI0uGSCUwDP/7IClxgu7pTkdK5h29ko9PX+XyAc60UM1xYXQtxy2DOgo4037U0MnxL6EXZWuvWCiFRK84iI0zGJUrri0xWIWVd602KCpntBpiJbNJ0JMcn4M6Ikf1wjI8A2Fs2I8N9sYNHVqWufRtFgQQIZMsIkzCQFc3IMeytT9hQL9DT9pZsdX2YJCd/RGs4qjMpGztPa/Qd5rSpe8ntLx1wSt8g77X9hAb/lcn0QwWOtfUcvwDdbaeyCSg1wdgPMMgxw0SF71OAV3onZGytXenLcMhvZPJBil9MWYi3pDfXROLmU0C1UqOrzhUoNNGrnTXq3jcVaWoQm202oba5qhvbOMC4zx31m9aQeSUhms8qZBiWFcRfgG/ZH+i8voEjLeH15bRW5wb8iSXU8EM6j17RRW85uHFu9CnGe6FaZrdX9a7N3G1eziTMloWZyqNTtsW6S+IiaVdBWLXzXdz6jP/HbgP/Kmp8u6kG/Qp5rK1pbONjtYnYV2D8oO+nFZL+biSy4cP0nrhg2Xdodxk/AfV7i8sPwMAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "InfraCdkStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "MyApiEndpoint869ABE96": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "MyApi49610EDF"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "MyApiDeploymentStageprodE1054AF0"
      },
      "/"
     ]
    ]
   }
  },
  "s3bucketname": {
   "Value": {
    "Ref": "projects3bucketF7E4AFB6"
   }
  },
  "Dynamodbname": {
   "Value": {
    "Ref": "dynamodbtable2CA3F889"
   }
  },
  "apipath": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "MyApi49610EDF"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "MyApiDeploymentStageprodE1054AF0"
      },
      "/"
     ]
    ]
   }
  },
  "region": {
   "Value": {
    "Ref": "AWS::Region"
   }
  },
  "AdminUserAccessKey": {
   "Value": {
    "Ref": "AdminUserAccessKeycdkNamesuniqueId"
   }
  },
  "AdminUserSecretAccessKey": {
   "Value": {
    "Fn::GetAtt": [
     "AdminUserAccessKeycdkNamesuniqueId",
     "SecretAccessKey"
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}