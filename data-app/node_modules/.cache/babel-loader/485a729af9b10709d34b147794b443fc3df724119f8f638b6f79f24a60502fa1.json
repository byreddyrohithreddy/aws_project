{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\byred\\\\Downloads\\\\aws-project\\\\data-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Create state to store file\n  const [file, setFile] = useState(null);\n  const [inputText, setInputText] = useState('');\n  //const [uploadStatus, setUploadStatus] = useState(\"idle\"); // \"idle\", \"uploading\", \"success\", \"error\"\n\n  const handleTextInputChange = event => {\n    setInputText(event.target.value);\n  };\n\n  // Function to handle file and store it to file state\n  const handleFileChange = e => {\n    // Uploaded file\n    const file = e.target.files[0];\n    // Changing file state\n    setFile(file);\n  };\n\n  // Function to upload file to s3\n  const uploadFile = async () => {\n    // S3 Bucket Name\n    const S3_BUCKET = \"input-form\";\n\n    // S3 Region\n    const REGION = \"us-west-1\";\n\n    //gateway end point to access lambda\n\n    // todo:: Remove this hard code\n    // const CREDENTIALS = {\n    //   accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n    //   secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n    // }\n\n    // When no region or credentials are provided, the SDK will use the\n    // region and credentials from the local AWS config.\n\n    const s3Client = new S3Client({\n      region: REGION\n      // credentials: CREDENTIALS\n    });\n    //s3Client.config.credentials().then(console.log)\n    // Uploading file to s3\n    const command = new PutObjectCommand({\n      Bucket: S3_BUCKET,\n      Key: file.name,\n      Body: file\n    });\n    try {\n      const response = await s3Client.send(command);\n      console.log(response);\n      alert(\"File uploaded successfully.\");\n    } catch (err) {\n      console.error(err);\n      alert(\"Failed to upload file.\");\n    }\n\n    //insert into dynamo via lambda\n    const API_PATH = 'https://ckaxti9hn8.execute-api.us-west-1.amazonaws.com';\n    const dynamoDbData = {\n      id: nanoid(),\n      input_text: inputText,\n      input_file_path: `${S3_BUCKET}/${file.name}`\n    };\n    const response = await fetch(API_PATH, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(dynamoDbData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to save data to DynamoDB\");\n    }\n    alert(\"File uploaded and data saved successfully!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"inputText\",\n        children: \"Text input:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"inputText\",\n        placeholder: \"enter text\",\n        value: inputText,\n        onChange: handleTextInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fileInput\",\n        children: \"File input:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        accept: \".txt\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: uploadFile,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1gXZcAHTgom0+pXkzYUjvMwzM18=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["PutObjectCommand","S3Client","useState","nanoid","jsxDEV","_jsxDEV","App","_s","file","setFile","inputText","setInputText","handleTextInputChange","event","target","value","handleFileChange","e","files","uploadFile","S3_BUCKET","REGION","s3Client","region","command","Bucket","Key","name","Body","response","send","console","log","alert","err","error","API_PATH","dynamoDbData","id","input_text","input_file_path","fetch","method","headers","body","JSON","stringify","ok","Error","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/byred/Downloads/aws-project/data-app/src/App.js"],"sourcesContent":["\nimport {PutObjectCommand, S3Client} from \"@aws-sdk/client-s3\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nfunction App() {\n  // Create state to store file\n  const [file, setFile] = useState(null);\n  const [inputText, setInputText] = useState('')\n  //const [uploadStatus, setUploadStatus] = useState(\"idle\"); // \"idle\", \"uploading\", \"success\", \"error\"\n\n\n  const handleTextInputChange = (event) => {\n      setInputText(event.target.value);\n      };\n    \n// Function to handle file and store it to file state\nconst handleFileChange = (e) => {\n  // Uploaded file\n  const file = e.target.files[0];\n  // Changing file state\n  setFile(file);\n};\n\n  // Function to upload file to s3\n  const uploadFile = async () => {\n    // S3 Bucket Name\n    const S3_BUCKET = \"input-form\";\n\n    // S3 Region\n    const REGION = \"us-west-1\";\n\n    //gateway end point to access lambda\n    \n      // todo:: Remove this hard code\n      // const CREDENTIALS = {\n      //   accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n      //   secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n      // }\n\n      // When no region or credentials are provided, the SDK will use the\n      // region and credentials from the local AWS config.\n      \n      const s3Client = new S3Client({\n        region: REGION,\n        // credentials: CREDENTIALS\n    });\n      //s3Client.config.credentials().then(console.log)\n      // Uploading file to s3\n      const command = new PutObjectCommand({\n          Bucket: S3_BUCKET,\n          Key: file.name,\n          Body: file\n      });\n\n      try {\n          const response = await s3Client.send(command);\n          console.log(response);\n          alert(\"File uploaded successfully.\");\n      } catch (err) {\n          console.error(err);\n          alert(\"Failed to upload file.\");\n      }\n\n    //insert into dynamo via lambda\n    const API_PATH='https://ckaxti9hn8.execute-api.us-west-1.amazonaws.com'\n    const dynamoDbData = {\n      id: nanoid(),\n      input_text: inputText,\n      input_file_path: `${S3_BUCKET}/${file.name}`,\n    };\n\n    const response = await fetch(API_PATH, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\":\"application/json\",\n      },\n      body: JSON.stringify(dynamoDbData),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to save data to DynamoDB\");\n    }\n    alert(\"File uploaded and data saved successfully!\");\n    \n  };\n  \n  return (\n    <div className=\"App\">\n      <div>\n      <label htmlFor=\"inputText\">Text input:</label>\n      <input\n        type=\"text\"\n        id=\"inputText\"\n        placeholder='enter text'\n        value={inputText}\n        onChange={handleTextInputChange}\n      />\n      <br />\n      <label htmlFor=\"fileInput\">File input:</label>\n        <input type=\"file\"\n        id=\"fileInput\"\n        accept=\".txt\"\n         onChange={handleFileChange} />\n         <br />\n        <button type=\"submit\" onClick={uploadFile}>Upload</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}